"""
File to generate the Pseudo-Cl power spectrum from a set of previously-generated ensemble of maps
"""
import numpy as np
import healpy as hp
import pymaster as nmt


# The map resolution that we're going to be processing
n_side = 256

# The number of maps in the ensemble
num_maps = 1250

# The location of the maps
filepath = "/disk01/maraio/NonGaussianShear/N1024_LogNormal/Maps_N256"

# The mask that we want to apply to the maps
mask = hp.read_map(f'../data/masks/SkyMask_N{n_side}_nostars.fits', dtype=float)

# Create the NaMaster field for our mask
field_mask = nmt.NmtField(mask, None, spin=2, purify_e=False, purify_b=False, n_iter=3)

# Create bins object using 1 ell per bin
bins = nmt.NmtBin.from_nside_linear(n_side, 1)

# Now compute the mode-coupling matrix for the mask once
workspace = nmt.NmtWorkspace()
workspace.compute_coupling_matrix(field_mask, field_mask, bins)

# Go through our ensemble of maps
for map_num in range(num_maps):
    if np.mod(map_num, 50) == 0:
        print(map_num, end=' ', flush=True)

    # Read in the set of shear maps generated by Flask
    map_Q, map_U = hp.read_map(f"{filepath}/Map{map_num}-f1z1.fits", field=[1, 2])

    # Create NaMaster field object for our maps
    fields = nmt.NmtField(mask, [map_Q, map_U], purify_e=False, purify_b=False, n_iter=3)

    # Now recover the power spectrum of these fields
    cl_coupled = nmt.compute_coupled_cell(fields, fields)
    cl_EE, cl_EB, cl_BE, cl_BB = workspace.decouple_cell(cl_coupled)

    # Save the power spectrum for the current realisation
    np.savetxt(f'{filepath}/Map{map_num}_Cl_EE_PCl.dat', cl_EE)
    np.savetxt(f'{filepath}/Map{map_num}_Cl_BB_PCl.dat', cl_BB)

print('...Done!')
